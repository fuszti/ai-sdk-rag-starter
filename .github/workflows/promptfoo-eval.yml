name: RAG Assistant Evaluation

on:
  push:
    branches: [main, Module-05-ci-demo]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual trigger for demo

jobs:
  evaluate:
    name: Run Promptfoo Evaluation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          npx promptfoo@latest --version

      - name: Setup PostgreSQL database
        run: |
          # Start PostgreSQL with pgvector
          docker compose up -d postgres
          sleep 10  # Wait for database to be ready

      - name: Setup environment
        run: |
          # Create results directory
          mkdir -p results

          # Setup environment variables from secrets
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/rag_starter" >> $GITHUB_ENV

      - name: Run database migrations
        run: |
          # Run database migrations/setup
          pnpm run db:migrate || pnpm run db:push || true

      - name: Start application server
        run: |
          # Build the application
          pnpm run build

          # Start the server in background
          pnpm start &

          # Wait for server to be ready
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "Server is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done

      - name: Run Promptfoo evaluation
        id: eval
        continue-on-error: true
        run: |
          # Run the evaluation
          npx promptfoo@latest eval \
            -c promptfooconfig.yaml \
            --output results/output.json \
            --output results/output.html \
            --no-progress-bar || true

          # Generate a summary
          if [ -f results/output.json ]; then
            # Extract pass rate from results
            TOTAL=$(jq '.results | length' results/output.json)
            PASSED=$(jq '[.results[] | select(.pass == true)] | length' results/output.json)

            if [ "$TOTAL" -gt 0 ]; then
              PASS_RATE=$(echo "scale=2; $PASSED / $TOTAL" | bc)
            else
              PASS_RATE=0
            fi

            echo "Pass rate: $PASS_RATE ($PASSED/$TOTAL)"
            echo "pass_rate=$PASS_RATE" >> $GITHUB_OUTPUT
            echo "passed=$PASSED" >> $GITHUB_OUTPUT
            echo "total=$TOTAL" >> $GITHUB_OUTPUT

            # Set status based on threshold (75% for demo)
            if (( $(echo "$PASS_RATE >= 0.75" | bc -l) )); then
              echo "status=✅ Tests Passed" >> $GITHUB_OUTPUT
              echo "Evaluation passed!"
            else
              echo "status=⚠️ Some Tests Failed" >> $GITHUB_OUTPUT
              echo "Evaluation completed with failures"
            fi
          else
            echo "status=❌ Evaluation Error" >> $GITHUB_OUTPUT
            echo "pass_rate=0" >> $GITHUB_OUTPUT
            echo "passed=0" >> $GITHUB_OUTPUT
            echo "total=0" >> $GITHUB_OUTPUT
          fi

      - name: Upload evaluation results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: promptfoo-results
          path: |
            results/output.json
            results/output.html
            results/summary.json

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let comment = '';

            if (fs.existsSync('results/output.json')) {
              const results = JSON.parse(fs.readFileSync('results/output.json', 'utf8'));
              const total = results.results ? results.results.length : 0;
              const passed = results.results ? results.results.filter(r => r.pass).length : 0;
              const passRate = total > 0 ? ((passed / total) * 100).toFixed(1) : 0;
              const status = passRate >= 75 ? '✅' : '⚠️';

              comment = `## ${status} Promptfoo Evaluation Results

              **Pass Rate:** ${passRate}%
              **Tests Run:** ${total}
              **Passed:** ${passed}
              **Failed:** ${total - passed}

              ### Test Details:
              | Test | Status | Description |
              |------|--------|-------------|
              ${results.results ? results.results.map(r =>
                `| ${r.pass ? '✅' : '❌'} | ${r.pass ? 'PASS' : 'FAIL'} | ${r.description || 'Test case'} |`
              ).join('\n') : '| No results | - | - |'}

              📊 [View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `;
            } else {
              comment = `## ❌ Promptfoo Evaluation Error

              The evaluation could not complete. Please check the logs for details.

              📊 [View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Create status badge
        if: always()
        run: |
          # Create a simple status file for badge generation
          mkdir -p results
          echo "${{ steps.run-promptfoo.outputs.status }}" > results/status.txt
          echo "Pass Rate: ${{ steps.run-promptfoo.outputs.pass_rate }}" >> results/status.txt